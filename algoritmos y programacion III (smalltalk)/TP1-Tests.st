TestCase subclass: #AlgoRemisTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/11/2021 17:47'!test21ChoferGuardaSuNombre	| agustin nicolas |	agustin := Chofer new.	nicolas := Chofer new.	 	agustin conNombre: 'agustin' autoElectricoConTarifaInicial: 200.	nicolas conNombre: 'nicolas' autoNormalConTarifaInicial: 100.	self assert: 'agustin'  equals: (agustin nombre).	self assert: 'nicolas'  equals: (nicolas nombre).	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/8/2021 15:42'!test05ViajeACiudadUniversitariaConAutoElectricoSaleMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAuto: 'Nico' conTarifaInicial: 250.	algoRemis registrarChoferDeAutoElectrico: 'Seba' conTarifaInicial: 400.	algoRemis crearViajeConDestino: 'Ciudad Universitaria' aKms: 25 peajes: 2.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Ciudad Universitaria'.	valorEsperado := 400 "tarifa inicial" + (25 "km" * 30 "precio/km") + (2 "peajes" * 50 "tarifa peaje").	self assert: 'Seba' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/11/2021 20:03'!test25ClaseDescuentoReconoceSusValores	| descuentoViaje descuentoHospital descuentoNulo descuentoHospitalMinusculas|	descuentoViaje := Descuento new.			descuentoHospital  := descuentoViaje asignarDescuento: 'Hospital Belgrano'.	descuentoHospitalMinusculas := descuentoViaje asignarDescuento: 'hospital britanico'.	descuentoNulo := descuentoViaje asignarDescuento: 'Casa Rosada'.			self assert: 0.2 closeTo: (descuentoHospital   valor  ) precision: precision.	self assert: 0.2 closeTo: (descuentoHospitalMinusculas    valor  ) precision: precision.	self assert: 1 closeTo: (descuentoNulo    valor  ) precision: precision.	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/1/2021 14:42'!test02AlgoRemisConDosChoferesRegistradosConDistintaTarifaInicialEligeElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 450.	algoRemis crearViajeConDestino: 'Av Paseo Colon 850' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Av Paseo Colon 850'.	valorEsperado := 450 "tarifa inicial" + (15 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje").	self assert: 'Pablo' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/1/2021 14:42'!test04AlgoRemisConDosChoferesRegistradosConDistintaTarifaInicialEligeElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAutoElectrico: 'Tomas' conTarifaInicial: 200.	algoRemis registrarChoferDeAutoElectrico: 'Seba' conTarifaInicial: 400.		algoRemis crearViajeConDestino: 'Segurola y Habana 4310, septimo piso' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Segurola y Habana 4310, septimo piso'.	valorEsperado := 200 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Tomas' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/7/2021 22:32'!test10CantidadKmYPeajesNegativoDaError	| algoRemis |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Tomas' conTarifaInicial: 400.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 300.	self should: [ algoRemis crearViajeConDestino: 'Hospital Tres Arcos' aKms: -5 peajes: 1. ] raise: CantidadInvalida.	self should: [ algoRemis crearViajeConDestino: 'Hospital Tres Arcos' aKms: 5 peajes: -100. ] raise: CantidadInvalida.	self should: [ algoRemis crearViajeConDestino: 'Hospital Tres Arcos' aKms: -5 peajes: -100. ] raise: CantidadInvalida.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/9/2021 01:54'!test12AlgoRemisConVariosDestinosRegistradosEncuentraElCorrectoConDescuentoHospital	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAutoElectrico: 'Carlos' conTarifaInicial: 200.		algoRemis crearViajeConDestino: 'Segurola y Habana 4310, septimo piso' aKms: 15 peajes: 1.	algoRemis crearViajeConDestino: 'Hospital Lavallol' aKms: 20 peajes: 0.	algoRemis crearViajeConDestino: 'Estacion Monte Grande' aKms: 35 peajes: 5.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Hospital Lavallol'.	valorEsperado := 0.2 * (200 "tarifa inicial" + (20 "km" * 30 "precio/km") + (0 "peajes" * 50 "tarifa peaje")).	self assert: 'Carlos' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/11/2021 17:58'!test24RegistrarChoferAUnViajeLoReconoce	| jorge viaje |	jorge := Chofer new.	viaje := Viaje new.		jorge conNombre: 'jorge' autoElectricoConTarifaInicial: 100.	viaje choferEs: jorge.			self assert: 'jorge'  equals: (viaje chofer).	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/1/2021 14:41'!test06ViajeAHospitalRecibeUnDescuentoAdicional	| algoRemis viaje valorEsperadoConHospital |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Pablo' conTarifaInicial: 450.	algoRemis registrarChoferDeAuto: 'Santi' conTarifaInicial: 350.	algoRemis crearViajeConDestino: 'Hospital Tres Arcos' aKms: 10 peajes: 1.		viaje := 	algoRemis viajeMasBaratoParaDestino: 'Hospital Tres Arcos'.		valorEsperadoConHospital := 0.2 * (350 "tarifa inicial" + (10 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje")).	self assert: 'Santi' equals: (viaje chofer).	self assert: valorEsperadoConHospital closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/8/2021 16:15'!test14ChoferAutoNormalyAutoElectricoAMismoDestinoDevuelvePreciosDiferentes	| agustin nicolas valorEsperadoAgustin valorEsperadoNicolas viajeAgustin viajeNicolas |	agustin := Chofer new.	nicolas := Chofer new.	viajeAgustin := Viaje new.	viajeNicolas := Viaje new.		 	agustin conNombre: 'agustin' autoElectricoConTarifaInicial: 300.	nicolas conNombre: 'nicolas' autoNormalConTarifaInicial: 100.	viajeAgustin nombreDestinoEs: 'Obelisco' estaAKm: 15 yestaAPeajes: 1.	viajeAgustin choferEs: agustin.	viajeNicolas nombreDestinoEs: 'Obelisco' estaAKm: 15 yestaAPeajes: 1.	viajeNicolas choferEs: nicolas.	valorEsperadoAgustin := 300 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	valorEsperadoNicolas := 100 "tarifa inicial" + (15 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje").	self assert: valorEsperadoAgustin  closeTo: (viajeAgustin precio) precision: precision.	self assert: valorEsperadoNicolas  closeTo: (viajeNicolas precio) precision: precision.	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/9/2021 02:28'!test13AlgoRemisConReconoceHospitalConMinusculas	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAutoElectrico: 'Fabian' conTarifaInicial: 500.	algoRemis crearViajeConDestino: 'Hospital Lavallol' aKms: 20 peajes: 5.			viaje := 	algoRemis viajeMasBaratoParaDestino: 'hospital lavallol'.	valorEsperado := 0.2 * (500 "tarifa inicial" + (20 "km" * 30 "precio/km") + (5 "peajes" * 50 "tarifa peaje")).			self assert: 'Fabian' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/7/2021 19:51'!test09ViajeADestinoNoCreado	| algoRemis |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAuto: 'Agustin' conTarifaInicial: 250.	algoRemis crearViajeConDestino: 'Parque Lezama' aKms: 20 peajes: 0.	self should: [ algoRemis viajeMasBaratoParaDestino: 'Ciudad Universitaria' ] raise: DestinoInexistente.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/11/2021 17:59'!test23ViajeReconoceFuncionTieneNombreConMayusculasYMinusculas	| viaje |		viaje := Viaje new.		viaje nombreDestinoEs: 'Turdera' estaAKm: 40 yestaAPeajes: 0.		self assert: (viaje tieneNombre: 'Turdera').	self assert: (viaje tieneNombre: 'turdera').	self assert: (viaje tieneNombre: 'turdERA').! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/9/2021 01:52'!test11AlgoRemisConVariosDestinosRegistradosEncuentraElCorrecto	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAutoElectrico: 'Tomas' conTarifaInicial: 200.		algoRemis crearViajeConDestino: 'Segurola y Habana 4310, septimo piso' aKms: 15 peajes: 1.	algoRemis crearViajeConDestino: 'Hospital Lavallol' aKms: 20 peajes: 0.	algoRemis crearViajeConDestino: 'Estacion Monte Grande' aKms: 35 peajes: 5.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Segurola y Habana 4310, septimo piso'.	valorEsperado := 200 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Tomas' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/7/2021 19:48'!test08ViajeAHospitalMalEscritoNoRecibeDescuento	| algoRemis viaje valorEsperadoConHospital |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Carlos' conTarifaInicial: 450.	algoRemis crearViajeConDestino: 'Hospial Britanico' aKms: 10 peajes: 1.		viaje := 	algoRemis viajeMasBaratoParaDestino: 'Hospial Britanico'.		valorEsperadoConHospital := (450 "tarifa inicial" + (10 "km" * 50 "precio/km") + (1 "peajes" * 100 "tarifa peaje")).	self assert: valorEsperadoConHospital closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/1/2021 14:41'!test01ViajeDeChoferDeAutoOfreceElPrecioMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.	algoRemis registrarChoferDeAuto: 'Diego' conTarifaInicial: 500.	algoRemis crearViajeConDestino: 'Parque La Costa' aKms: 2 peajes: 0.	viaje := algoRemis viajeMasBaratoParaDestino: 'Parque La Costa'.	valorEsperado := 500 "tarifa inicial" + (2 "km" * 50 "precio/km")+ (0 "peajes" * 100 "tarifa peaje").	self assert: 'Diego' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/8/2021 19:46'!test18CalcularPrecioViajeSinAsignarleTodaviaUnChofer	| franco carlos valorEsperadoCarlos valorEsperadoFranco viaje |	carlos := Chofer new.	franco := Chofer new.	viaje := Viaje new.		 	carlos conNombre: 'carlos' autoElectricoConTarifaInicial: 500.	franco conNombre: 'franco' autoNormalConTarifaInicial: 200.	viaje nombreDestinoEs: 'Plaza de la familia' estaAKm: 10 yestaAPeajes: 5.	valorEsperadoCarlos := 500 "tarifa inicial" + (10 "km" * 30 "precio/km") + (5 "peajes" * 50 "tarifa peaje").	valorEsperadoFranco := 200 "tarifa inicial" + (10 "km" * 50 "precio/km") + (5 "peajes" * 100 "tarifa peaje").	self assert: valorEsperadoCarlos  closeTo: (carlos calcularPrecioConDestino: viaje) precision: precision.	self assert: valorEsperadoFranco  closeTo: (franco calcularPrecioConDestino: viaje) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/8/2021 19:56'!test19RegistrarDosChoferesAUnViajeSoloGuardaElUltimo	| jorge oscar viaje valorEsperadoJorge valorEsperadoOscar |	jorge := Chofer new.	oscar := Chofer new.	viaje := Viaje new.		 	jorge conNombre: 'jorge' autoElectricoConTarifaInicial: 100.	oscar conNombre: 'oscar' autoNormalConTarifaInicial: 200.	viaje nombreDestinoEs: 'Cementerio de chacarita' estaAKm: 100 yestaAPeajes: 7.	valorEsperadoJorge := 100 "tarifa inicial" + (100 "km" * 30 "precio/km") + (7 "peajes" * 50 "tarifa peaje").	valorEsperadoOscar := 200 "tarifa inicial" + (100 "km" * 50 "precio/km") + (7 "peajes" * 100 "tarifa peaje").			viaje choferEs: jorge.	self assert: 'jorge'  equals: (viaje chofer).	self assert: valorEsperadoJorge  closeTo: (viaje precio) precision: precision.	viaje choferEs: oscar.	self assert: 'oscar'  equals: (viaje chofer).	self assert: valorEsperadoOscar  closeTo: (viaje precio) precision: precision.	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/9/2021 15:55'!test20SupuestoDosViajesPuedenTenerMismoChofer	| carlos viajeEscalada viajeLanus |	carlos := Chofer new.	viajeEscalada := Viaje new.	viajeLanus := Viaje new.	 	carlos conNombre: 'carlos' autoElectricoConTarifaInicial: 100.	viajeEscalada nombreDestinoEs: 'Escalada' estaAKm: 20 yestaAPeajes: 3.	viajeEscalada choferEs: carlos.	viajeLanus nombreDestinoEs: 'Lanus' estaAKm: 25 yestaAPeajes: 2.	viajeLanus choferEs: carlos.		self assert: 'carlos'  equals: (viajeLanus chofer).	self assert: 'carlos'  equals: (viajeEscalada chofer).	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/11/2021 17:53'!test22CrearUnViajeGuardaCorrectamenteSusDatos	| viaje |		viaje := Viaje new.		viaje nombreDestinoEs: 'Florencio Varela' estaAKm: 40 yestaAPeajes: 0.		self assert: 40 closeTo: (viaje cantKilometros  ) precision: precision.	self assert: 0  closeTo: (viaje cantPeajes ) precision: precision.	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/8/2021 16:33'!test17RegistrarViajeConKmyPeajesNegativoEsInvalido	|viajePeajeNegativo viajeKmNegativo|	viajePeajeNegativo := Viaje new.	viajeKmNegativo  := Viaje new.	self should: [ viajePeajeNegativo nombreDestinoEs: 'Luna' estaAKm: 35 yestaAPeajes: -3. ] raise: CantidadInvalida.	self should: [ viajeKmNegativo nombreDestinoEs: 'Marte' estaAKm: -100000 yestaAPeajes: 0.  ] raise: CantidadInvalida.	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/7/2021 20:21'!test07TarifaNegativaNoEsValida	|algoRemis|	algoRemis := AlgoRemis new.	self should: [ algoRemis registrarChoferDeAuto: 'Gonzalo' conTarifaInicial: -598. ] raise: TarifaInvalida.	self should: [ algoRemis registrarChoferDeAutoElectrico: 'Martin' conTarifaInicial: -8. ] raise: TarifaInvalida.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 10/1/2021 14:40'!test03ViajeDeChoferDeAutoElectricoHaciaFIUBAOfreceElMasBarato	| algoRemis viaje valorEsperado |	algoRemis := AlgoRemis new.		algoRemis registrarChoferDeAutoElectrico: 'Tomas' conTarifaInicial: 200.	algoRemis crearViajeConDestino: 'Av Paseo Colon 850' aKms: 15 peajes: 1.	viaje := 	algoRemis viajeMasBaratoParaDestino: 'Av Paseo Colon 850'.	valorEsperado := 200 "tarifa inicial" + (15 "km" * 30 "precio/km") + (1 "peajes" * 50 "tarifa peaje").	self assert: 'Tomas' equals: (viaje chofer).	self assert: valorEsperado closeTo: (viaje precio) precision: precision.! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/8/2021 16:26'!test15ViajeAHospitalyViajeNormalTienenSuDescuentoCorrespondiente	| viajeHospital viajeNormal |	viajeHospital  := Viaje new.	viajeNormal := Viaje new.			viajeHospital  nombreDestinoEs: 'Hospital britanico' estaAKm: 50 yestaAPeajes: 3.	viajeNormal nombreDestinoEs: 'Casa Rosada' estaAKm: 20 yestaAPeajes: 0.	self assert: 1 equals: (viajeNormal descuento).	self assert: 0.2 equals: (viajeHospital descuento).	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/13/2021 16:01'!test26ChoferCalculaPrecioUnitariamente	| jorge carlos viaje |	jorge := Chofer new.	carlos := Chofer new.	viaje := Viaje new.		jorge conNombre: 'jorge' autoElectricoConTarifaInicial: 100.	carlos conNombre: 'carlos' autoNormalConTarifaInicial: 100.	viaje nombreDestinoEs: 'Obelisco' estaAKm: 5  yestaAPeajes: 0. 	self assert: 250  closeTo: (jorge calcularPrecioConDestino: viaje) precision: precision.	self assert: 350  closeTo: (carlos calcularPrecioConDestino: viaje) precision: precision.	! !!AlgoRemisTest methodsFor: 'tests' stamp: 'Agus 11/8/2021 16:30'!test16RegistrarChoferConTarifaNegativaNoEsValido	|pablo jorge|	pablo := Chofer new.	jorge := Chofer new.	self should: [ pablo conNombre: 'pablo' autoNormalConTarifaInicial: -1. ] raise: TarifaInvalida.	self should: [ jorge conNombre: 'jorge' autoElectricoConTarifaInicial: -100. ] raise: TarifaInvalida.	! !!AlgoRemisTest methodsFor: 'initialization' stamp: 'Agus 10/5/2021 04:15'!setUp	precision := 0.001.! !